--- Functions for working with items.
--  @usage local Item = ELONA.require("core.Item")
module "Item"

--- Returns the number of items on the ground.
--
--  @treturn num the item count
--  @function count
function count() end

--- Checks if an item has an enchantment.
--
--  @tparam LuaItem item (const) an item
--  @tparam num enchantment_id the ID of the enchantment
--  @treturn bool true if the item has the enchantment
--  @function has_enchantment
function has_enchantment(item, enchantment_id) end

--- Returns the item's name.
--
--  @tparam LuaItem item (const) the item
--  @tparam[opt] num number Overrides the item number
--  @tparam[opt] bool use_article Prepend articles like "the" to the item name
--  @treturn string
--  @function itemname
function itemname(item, number, use_article) end

--- Attempts to create an item of the given quantity at a position.
--  Returns the item stack if it was created, nil otherwise.
--
--  @tparam LuaPosition position (const) position to create the item at
--  @tparam num id the item prototype ID
--  @tparam num number the number of items to create
--  @treturn[1] LuaItem the created item stack
--  @treturn[2] nil
--  @function create
function create(position, id, number) end

--- Retrieves the player's memory of an item type.
--
--  @tparam num type
--  @tparam string id
--  @function memory
function memory(type, id) end

--- Stacks an item in the inventory indicated. The item will no longer be valid
--  for use.
--
--  @tparam num inventory_id
--  @tparam LuaItem handle
--  @treturn[1] LuaItem The modified item stack on success
--  @treturn[2] nil
--  @function stack
function stack(inventory_id, handle, show_message) end

--- Returns the trading rate of a cargo item.
--
--  @tparam LuaItem handle A cargo item
--  @treturn num
--  @function trade_rate
function trade_rate(handle) end

--- Tries to find an item in the player's inventory, the ground, or both.
--
--  @tparam string item_id The item ID to find.
--  @tparam ItemFindLocation location Where to search for the item.
--  @function find
function find(item_id, location) end

--- Returns the string representation of a weight value.
--
--  @tparam num weight The weight value
--  @treturn string
--  @function weight_string
function weight_string(weight) end

--- Queries whether the inventory has at least one free slot.
--
--  @tparam num inventory_id The inventory ID
--  @treturn True if the inventory has at least one free slot; false if not.
--  @function has_free_slot
function has_free_slot(inventory_id) end

--- Gets the player's inventory.
--
--  @treturn The player's inventory.
--  @function player_inventory
function player_inventory() end

--- Gets the map inventory. It contains all items on the ground in the current
--  map.
--
--  @treturn The map inventory.
--  @function map_inventory
function map_inventory() end
